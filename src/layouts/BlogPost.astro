---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'

type Props = {
	id: CollectionEntry<'blog'>['id']
	data: CollectionEntry<'blog'>['data']
	headings: MarkdownHeading[]
	readTime: string
}

const { data, readTime, headings, id } = Astro.props
const { title, description, pubDate, heroImage, tags } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}
>
	<article class='min-w-full py-6 sm:py-8'>
		<div class='max-w-4xl mx-auto px-4 sm:px-6 lg:px-8'>
			<header class='mb-8 flex flex-col justify-center items-center gap-4 text-center'>
				<div class='flex flex-col gap-3'>
					<div
						class='flex items-center justify-center gap-x-2 text-xs text-gray-600 dark:text-gray-400'
					>
						<span>最近更新于 <FormattedDate date={pubDate} /></span>
						<span class='text-gray-400'>•</span>
						<span class='font-medium'>{readTime}</span>
					</div>
					<h1
						class='text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 dark:text-white leading-tight tracking-tight max-w-3xl'
					>
						{title}
					</h1>
				</div>

				<div class='flex flex-wrap justify-center items-center gap-2'>
					{tags.map((tag) => <Tag tag={tag} />)}
				</div>
			</header>

			{
				heroImage && (
					<div class='mb-8'>
						<Image
							src={heroImage}
							width={1000}
							height={500}
							quality={100}
							format='jpg'
							loading='eager'
							class='rounded-lg w-full h-48 sm:h-64 md:h-80 object-cover shadow-sm'
							alt={`img of ${title}`}
						/>
					</div>
				)
			}
		</div>

		<div class='max-w-4xl mx-auto px-4 sm:px-6 lg:px-8'>
			<div class='border-t border-gray-200 dark:border-gray-700 pt-8'>
				<slot />
			</div>
		</div>
	</article>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('text-gray-600', 'dark:text-gray-400')
					index?.classList.add(
						'text-blue-600',
						'dark:text-blue-400',
						'font-medium',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('text-gray-600', 'dark:text-gray-400')
					index?.classList.remove(
						'text-blue-600',
						'dark:text-blue-400',
						'font-medium',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
